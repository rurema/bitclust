<%
 @title = "#{@entry.type} #{@entry.name}"
 @description = @entry.description
 @edit_url = edit_url(@entry.source_location) if @conf[:edit_base_url] && @entry.source_location
%>
<% if @conf[:canonical_base_url] %>
<script type="application/ld+json">
<%=
  breadcrumb_json_ld(
    [
      {
        name: manual_home_name,
        url: absolute_url_to(@urlmapper.document_url('index'))
      },
      {
        name: _('All Libraries'),
        url: absolute_url_to(library_index_url)
      },
      {
        name: friendly_library_name(@entry.library.name),
        url: absolute_url_to(@urlmapper.library_url(@entry.library.name))
      },
      {
        name: _("#{@entry.type} %s", @entry.name),
        url: canonical_url
      }
    ]
  )
%>
</script>
<% end %>
<header>
  <nav>
    <ol class="inline-breadcrumb-list">
      <li>
        <%= manual_home_link() %>
      </li>
      <li>
        <a href="<%= library_index_url() %>"><%= _('All Libraries') %></a>
      </li>
      <li>
        <%= friendly_library_link(@entry.library.name) %>
      </li>
      <li>
        <%=h _(@entry.type.to_s + ' %s', @entry.name) %>
      </li>
    </ol>
  </nav>
<% headline_init %>
<%= headline("#{@entry.type} #{@entry.name}" + @entry.ancestors[1..@alevel].map{|c| " + #{c.name}" }.join, edit_url: @edit_url) %>
</header>

<main>
<%
    myself, *supers = @entry.ancestors
    n = 0
%>

<% unless @entry.alias? %>
  <nav>
    <%= _('ancestors') %>:
    <ol class="inline-ancestors-list">
      <% supers.reverse_each do |c| %>
        <li>
          <%= class_link(c.name) %>
        </li>
        <% n += 1 %>
      <% end %>
      <li>
        <%= @entry.object? ? class_link(myself.name) : escape_html(myself.name) %>
      </li>
    </ol>
  </nav>
<% end %>

<% unless @entry.extended.empty? %>
<p>
  extend: <%= @entry.extended.map {|c| class_link(c.name) }.join(', ') %>
</p>
<% end %>

<% unless @entry.aliases.empty? %>
<p>
  aliases: <%=h @entry.aliases.map{|c| c.name}.join(', ') %>
</p>
<% end %>

<% unless @entry.dynamically_included.empty? %>
<p>
  dynamic include:
  <%=
    @entry.dynamically_included.map {|m|
      class_link(m.name) + " (by " + library_link(m.library.name) + ")"
    }.join(", ")
  %>
</p>
<% end %>

<% unless @entry.dynamically_extended.empty? %>
<p>
  dynamic extend:
  <%=
    @entry.dynamically_extended.map {|m|
      class_link(m.name) + " (by " + library_link(m.library.name) + ")"
    }.join(", ")
  %>
</p>
<% end %>

<%
    headline_push
%>
<%= headline(_("Abstract")) %>
<%= compile_rd(@entry.source) %>

<%
    ents =  @entry.partitioned_entries(@alevel)
    items =
    [[_('Singleton Methods'),         ents.singleton_methods          ],
     [_('Instance Methods'),          ents.instance_methods           ],
     [_('Private Singleton Methods'), ents.private_singleton_methods  ],
     [_('Private Instance Methods'),  ents.private_instance_methods   ],
     [_('Module Functions'),          ents.module_functions           ],
     [_('Constants'),                 ents.constants                  ],
     [_('Special Variables'),         ents.special_variables          ,'$']] %>
<%= headline(_("Index")) %>
<dl>
<% items.each do |label, entries, prefix| next if entries.empty? %>
<dt><%= label %></dt>
<dd>
<ul class="class-toc">
<%
  entries.inject([]){ |ary, m| ary.concat(m.names.map{ |mname| [m.index_id, mname] }) }
    .uniq
    .sort_by{ |_, mname| mname.gsub(/(?=[^\da-zA-Z])/, "\t") }
    .each do |index_id, mname|
%>
<li><a href="#<%= index_id %>"><%= escape_html "#{prefix}#{mname}" %></a></li>
<%
  end
%>
</ul>
</dd>
<% end %>
</dl>

<%
_myself, *ancestors = @entry.ancestors.reject { |c| %w[Object Kernel BasicObject].include?(c.name) }
displayed_instance_methods = Set.new(ents.instance_methods.flat_map(&:names))
displayed_singleton_methods = Set.new(ents.singleton_methods.flat_map(&:names))
%>

<% unless ancestors.empty? %>
  <%= headline(_("Ancestor Methods")) %>
<dl>
  <% ancestors.each do |c|
       undefined_methods = @entry.partitioned_entries.undefined
       methods = c.partitioned_entries(@alevel).singleton_methods
         .flat_map { |m| m.names.map { |n| [n, m] } }
         .reject { |name,| displayed_singleton_methods.include?(name) }
         .reject { |name,| undefined_methods.any? { |m| m.names.include?(name) } }
         .sort
       next if methods.empty? %>
<dt><%= _('Ancestor Singleton Methods %s', c.name) %></dt>
<dd>
  <ul class="class-toc">
    <% methods.each do |name, m| %>
      <li><%= method_link(m.spec_string, name) %></li>
      <% displayed_singleton_methods << name %>
    <% end %>
  </ul>
</dd>
  <% end %>

  <% ancestors.each do |c|
       undefined_methods = @entry.partitioned_entries.undefined
       methods = c.partitioned_entries(@alevel).instance_methods
         .flat_map { |m| m.names.map { |n| [n, m] } }
         .reject { |name,| displayed_instance_methods.include?(name) }
         .reject { |name,| undefined_methods.any? { |m| m.names.include?(name) } }
         .sort
       next if methods.empty? %>
<dt><%= _('Ancestor Methods %s', c.name) %></dt>
<dd>
  <ul class="class-toc">
    <% methods.each do |name, m| %>
      <li><%= method_link(m.spec_string, name) %></li>
      <% displayed_instance_methods << name %>
    <% end %>
  </ul>
</dd>
  <% end %>
</dl>
<% end %>

<%
    items.each do |label, entries|
      unless entries.empty? %>
<%=     headline(label) %>
<dl>
<%
        headline_push
        entries.each do |m|
%>
<%=       compile_method(m) %>
<%
        end
        headline_pop
%>
</dl>
<%
      end
    end
    headline_pop
%>
</main>
